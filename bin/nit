#!/usr/bin/env ruby
require "thor"
require "/home/nick/projects/nit/lib/nit/lines"
require "/home/nick/projects/nit/lib/nit/status"
require "/home/nick/projects/nit/lib/nit/commit"
require "/home/nick/projects/nit/lib/nit/config"
require "/home/nick/projects/nit/lib/nit/ignore"



# TODO:
# * diff 1 2
# * diff workflow: going through changed files, adding them while reading!
# * nit unstage => git reset HEAD
# * remove branch command
# * redirect git xxx abc to git xxx ... when command not in nit. (checkout)

module Nit
  class App < Thor
    include Actions

    default_command(:status)

    desc "branch", "Invokes git branch"
    def branch
      puts "* #{current_branch}"
    end

    desc "status", "bla"
    def status
      puts Status.new(config).call
    end

    desc "commit", "blubb"
    def commit(*args)
      puts Commit.new(config).call(`git status`, args)
    end

    desc "ignore", "blubb"
    def ignore(*args)
      puts Ignore.new(config).call(`git status`, args)
    end


    desc "pull", "pull from current branch at origin"
    def pull
      `git pull origin #{current_branch}`
    end

    desc "push", "push to current branch at origin"
    def push
      `git push origin #{current_branch}`
    end

  private
    def current_branch
      output = `git branch`
      branch = output.match(/\* (.+)/)[1].strip
    end

    def config
      @config ||= Config.new # TODO: eventually pass path.
    end
  end
end

Nit::App.start
