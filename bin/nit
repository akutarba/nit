#!/usr/bin/env ruby
require "thor"
require "/home/nick/projects/nit/lib/nit/lines"

# TODO:
# * diff 1 2
# * diff workflow: going through changed files, adding them while reading!
# * nit => nit status with bold branch!
# * temporarily ignore files [ignored files: 12]
# * nit unstage => git reset HEAD

module Nit
  class App < Thor
    desc "branch", "Invokes git branch"
    def branch
      puts "* #{current_branch}"
    end

    desc "status", "bla"
    def status
      output = `git status`

      screen = Lines.new(output)

      screen.files do |file| # TODO: should we have redundant file patterns here? it is better readable, thou.
        ln = file.line
        if ln.match(screen.file_patterns[:modified])
          ln.sub!("#\tmodified:", "#\tmodified: [#{file.i}] ")
        elsif ln.match(screen.file_patterns[:new])
          ln.sub!("#\t", "#\t [#{file.i}] ")
        end
      end

      puts screen.to_s
    end

    desc "commit", "blubb"
    def commit(*args)
      files = Lines.new(`git status`).files

      commit_files = args.collect do |i|
        files[i.to_i]
      end

      system "git add #{commit_files.join(" ")} && git commit"
    end

    desc "pull", "pull from current branch at origin"
    def pull
      `git pull origin #{current_branch}`
    end

    desc "push", "push to current branch at origin"
    def push
      `git push origin #{current_branch}`
    end

  private
    def current_branch
      output = `git branch`
      branch = output.match(/\* (.+)/)[1].strip
    end
  end
end

Nit::App.start
